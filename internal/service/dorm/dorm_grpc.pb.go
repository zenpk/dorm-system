// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: dorm.proto

package dorm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DormClient is the client API for Dorm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DormClient interface {
	GetRemainCnt(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MapReply, error)
	GetAll(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetAllReply, error)
}

type dormClient struct {
	cc grpc.ClientConnInterface
}

func NewDormClient(cc grpc.ClientConnInterface) DormClient {
	return &dormClient{cc}
}

func (c *dormClient) GetRemainCnt(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MapReply, error) {
	out := new(MapReply)
	err := c.cc.Invoke(ctx, "/dorm.Dorm/GetRemainCnt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dormClient) GetAll(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetAllReply, error) {
	out := new(GetAllReply)
	err := c.cc.Invoke(ctx, "/dorm.Dorm/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DormServer is the server API for Dorm service.
// All implementations must embed UnimplementedDormServer
// for forward compatibility
type DormServer interface {
	GetRemainCnt(context.Context, *EmptyRequest) (*MapReply, error)
	GetAll(context.Context, *EmptyRequest) (*GetAllReply, error)
	mustEmbedUnimplementedDormServer()
}

// UnimplementedDormServer must be embedded to have forward compatible implementations.
type UnimplementedDormServer struct {
}

func (UnimplementedDormServer) GetRemainCnt(context.Context, *EmptyRequest) (*MapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemainCnt not implemented")
}
func (UnimplementedDormServer) GetAll(context.Context, *EmptyRequest) (*GetAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDormServer) mustEmbedUnimplementedDormServer() {}

// UnsafeDormServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DormServer will
// result in compilation errors.
type UnsafeDormServer interface {
	mustEmbedUnimplementedDormServer()
}

func RegisterDormServer(s grpc.ServiceRegistrar, srv DormServer) {
	s.RegisterService(&Dorm_ServiceDesc, srv)
}

func _Dorm_GetRemainCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DormServer).GetRemainCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dorm.Dorm/GetRemainCnt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DormServer).GetRemainCnt(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dorm_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DormServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dorm.Dorm/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DormServer).GetAll(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dorm_ServiceDesc is the grpc.ServiceDesc for Dorm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dorm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dorm.Dorm",
	HandlerType: (*DormServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRemainCnt",
			Handler:    _Dorm_GetRemainCnt_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Dorm_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dorm.proto",
}
